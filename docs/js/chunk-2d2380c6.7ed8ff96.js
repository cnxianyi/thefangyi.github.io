(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d2380c6"],{fe5f:function(t,a,i){"use strict";i.r(a);var l=i("7a23"),c=Object(l["K"])("data-v-69cf2032");Object(l["t"])("data-v-69cf2032");var e=Object(l["g"])(" Git Basis "),d=Object(l["g"])(" 2021年8月26日10:05:46 "),f={class:"xy"},v={class:"content"},o=Object(l["h"])("h2",null,"Git 分布式版本控制工具",-1),n=Object(l["f"])("<h4 data-v-69cf2032>git 常用命令</h4><ul data-v-69cf2032>鼠标右键 <li data-v-69cf2032>Git GUI Here : GIt提供的图形界面工具</li><li data-v-69cf2032>Git Bash Here : 命令行工具</li></ul><hr data-v-69cf2032><ul data-v-69cf2032>基本配置(命令行 Git Bash) <li data-v-69cf2032>git config --global user.name&quot;{username}&quot; : 设置用户名</li><li data-v-69cf2032>git config --global user.email&quot;{email@...}&quot; : 设置邮箱</li><li data-v-69cf2032>git config --global user.name ：查看</li><li data-v-69cf2032>git config --global user.email</li></ul><hr data-v-69cf2032><ol data-v-69cf2032>获取本地仓库 <small data-v-69cf2032>使用git 对代码进行版本控制，首先需要获得本地仓库</small><li data-v-69cf2032>进入目录</li><li data-v-69cf2032>右键 Git Bash</li><li data-v-69cf2032>$ git init</li><li data-v-69cf2032>创建成功会显示 .git 的隐藏目录</li><li data-v-69cf2032>.gitignore : 设置忽略 git 列表</li></ol><hr data-v-69cf2032><ul data-v-69cf2032> 基础操作 <li data-v-69cf2032>新创建或修改的文件 ， 使用 git add{文件名 / 通配符.} 添加到暂存区</li><li data-v-69cf2032>暂存区的文件 通过 git commit -m&#39;注释&#39; 提交到仓库</li><li data-v-69cf2032>git status 来查看当前 git 仓库的状态</li><li data-v-69cf2032>git reflog : 查看 git 操作记录</li><li data-v-69cf2032>git log[options] 查看 git 提交日志</li><ul data-v-69cf2032> options <li data-v-69cf2032>--all : 显示所有分支</li><li data-v-69cf2032>--pretty=oneline : 将提交信息输出为一行</li><li data-v-69cf2032>--abbrev-commit : 使得输出的 commitId 更简短</li><li data-v-69cf2032>--graph : 图形显示</li></ul><li data-v-69cf2032>版本回退 git reset --hard commitId</li></ul><hr data-v-69cf2032><h4 data-v-69cf2032>分支</h4><ul data-v-69cf2032><li data-v-69cf2032>git branch : 查看所有分支</li><li data-v-69cf2032>git branch {name} : 创建新分支</li><li data-v-69cf2032>git checkout {name} : 切换分支</li><li data-v-69cf2032>Git checkout -b {name} : 创建且切换到 分支</li><li data-v-69cf2032>git merge {name} : 将 {name} 分支合并到当前分支</li></ul><hr data-v-69cf2032><h4 data-v-69cf2032>Git Commit 注释规范</h4><pre data-v-69cf2032>&lt;type&gt;(&lt;scope&gt;) : &lt;subject&gt;\r\n// 空行\r\n&lt;body&gt;</pre><ul data-v-69cf2032> type (必须) : 说明 commit 的类别 <li data-v-69cf2032>br : 特别针对 Bug 号</li><li data-v-69cf2032>feat : 新功能 (feature)</li><li data-v-69cf2032>fix : 修补 Bug </li><li data-v-69cf2032>docs : 文档</li><li data-v-69cf2032>style : 格式(不修改代码的变动)</li><li data-v-69cf2032>refactor : 重构</li><li data-v-69cf2032>test : 增加测试</li><li data-v-69cf2032>chore : 构建过程中辅助工具的变动</li><li data-v-69cf2032>revert:feat(pencil):add &#39;graphiteWidth&#39; option (撤销之前的 commit)</li></ul><br data-v-69cf2032><ul data-v-69cf2032>scope : 说明 commit 影响的范围(数据层，控制层，视图层...)</ul><ul data-v-69cf2032>subject: 简短描述 - 动词开头，第一人称现在时，第一个字母小写，结尾不加句号</ul><ul data-v-69cf2032>body : 详细描述 </ul>",19);Object(l["r"])();var r=c((function(t,a,i,r,u,g){var s=Object(l["z"])("nav-bar"),b=Object(l["z"])("sidebarR");return Object(l["q"])(),Object(l["d"])("div",null,[Object(l["h"])(s,null,{default:c((function(){return[e]})),time:c((function(){return[d]})),_:1}),Object(l["h"])("div",f,[Object(l["h"])("div",v,[o,Object(l["h"])(b),n])])])})),u=i("d968"),g=i("1906"),s={data:function(){return{}},components:{navBar:u["a"],sidebarR:g["a"]},methods:{GoSection:function(t){document.getElementById("".concat(t)).scrollIntoView({behavior:"smooth"})}}},b=i("6b0d"),m=i.n(b);const h=m()(s,[["render",r],["__scopeId","data-v-69cf2032"]]);a["default"]=h}}]);
//# sourceMappingURL=chunk-2d2380c6.7ed8ff96.js.map