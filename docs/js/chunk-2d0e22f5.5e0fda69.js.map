{"version":3,"sources":["webpack:///./src/study/js/promise.vue","webpack:///./src/study/js/promise.vue?dc76"],"names":["class","id","default","time","GoSection","components","navBar","sidebarR","methods","str","document","getElementById","scrollIntoView","behavior","__exports__","render"],"mappings":"0JAGqC,a,iBAGH,wB,GAKzBA,MAAM,M,GACFA,MAAM,W,EACP,eAA6B,MAAzBC,GAAG,WAAU,WAAO,G,EAEc,eAA4B,KAAzBD,MAAM,gBAAc,S,iBAAK,Y,EAChC,eAA4B,KAAzBA,MAAM,gBAAc,S,iBAAK,U,EAC5B,eAA4B,KAAzBA,MAAM,gBAAc,S,iBAAK,Q,EACrB,eAA4B,KAAzBA,MAAM,gBAAc,S,iBAAK,e,q8HAjB7E,eA0KM,YAzKF,eAOU,QANWE,QAAO,gBAAC,iBAEzB,C,MACiBC,KAAI,gBAAC,iBAEtB,C,YAGR,eA8JM,MA9JN,EA8JM,CA7JF,eA4JM,MA5JN,EA4JM,CA3JF,EACA,eAKW,Q,wBAJP,iBAA2E,CAA3E,eAA2E,MAAtE,QAAK,+BAAE,EAAAC,UAAS,c,CAAa,E,IAClC,eAAqE,MAAhE,QAAK,+BAAE,EAAAA,UAAS,U,CAAS,E,IAC9B,eAAmE,MAA9D,QAAK,+BAAE,EAAAA,UAAS,U,CAAS,E,IAC9B,eAAiF,MAA5E,QAAK,+BAAE,EAAAA,UAAS,iB,CAAgB,E,cAEzC,Q,4BA8JG,GACXC,WAAY,CACRC,SAAA,KACAC,SAAA,QAEHC,QAAS,CACNJ,UADM,SACIK,GACNC,SAASC,eAAT,UAA2BF,IAAOG,eAAe,CAACC,SAAU,c,qBCpLxE,MAAMC,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASC,KAErD","file":"js/chunk-2d0e22f5.5e0fda69.js","sourcesContent":["<template>\r\n    <div>\r\n        <nav-bar>\r\n            <template v-slot:default>\r\n                Promise \r\n            </template>\r\n            <template v-slot:time>\r\n                2021年8月11日15:43:57\r\n            </template>\r\n        </nav-bar>\r\n\r\n    <div class=\"xy\">\r\n        <div class=\"content\">\r\n            <h2 id=\"Promise\">Promise</h2>\r\n            <sidebarR>\r\n                <h5 @click=\"GoSection('Promise')\"><i class='bx bxs-label'></i> Promise</h5>\r\n                <h5 @click=\"GoSection('TCF')\"><i class='bx bxs-label'></i> T C F</h5>\r\n                <h5 @click=\"GoSection('API')\"><i class='bx bxs-label'></i> API</h5>\r\n                <h5 @click=\"GoSection('AsyncAwait')\"><i class='bx bxs-label'></i> AsyncAwait</h5>\r\n            </sidebarR>\r\n            <h4>宏任务</h4>\r\n            <ol> 包括\r\n                <li>script</li>\r\n                <li>setTimeout</li>\r\n                <li>setInterval</li>\r\n                <li>setImmediate</li>\r\n                <li>I/O</li>\r\n                <li>UI rendering</li>\r\n                <span>！ 任务开始 script 为第一轮 宏任务 ， set... 将在下一轮执行</span>\r\n            </ol>\r\n            <hr>\r\n            <h4>微任务</h4>\r\n            <ul> 包括\r\n                <li>MutationObserver</li>\r\n                <li>promise.then() / catch()</li>\r\n                <li>promise开发的其他技术</li>\r\n                <li>V8垃圾回收过程</li>\r\n                <li>Node - process.nextTick</li>\r\n            </ul>\r\n            <hr>\r\n\r\n            <h4>event Loop 执行顺序</h4>\r\n            <ul>\r\n                <li>一开始js脚本作为一个宏任务执行</li>\r\n                <li>执行过程为 先执行宏任务，再检查微任务列表是否有任务</li>\r\n                <li><small>执行浏览器UI线程的渲染工作</small></li>\r\n                <li><small>检查是否有Web Worker任务，有则执行</small></li>\r\n                <li>检查是否有下一个宏任务，往复</li>\r\n            </ul>\r\n            <hr>\r\n            <h4>promise 状态(state)</h4>\r\n            <ul>\r\n                <li>pending 初始状态下<br>promise{<span class=\"code\">&#60;pending&#62;</span>}</li>\r\n                <li>fulfilled 成功<br><pre class=\"language-js\">resolve('value')</pre>promise{<span class=\"code\">&#60;fulfilled&#62;</span> : \"value\"}</li>\r\n                <li>rejected 失败<br><pre class=\"language-js\">reject(new Error(\"Err\"))</pre>Promise {<span class=\"code\">&#60;rejected&#62;</span>: Error: Err}</li>\r\n            </ul>\r\n            <hr>\r\n            <h4>Promise 对象构造器语法</h4>\r\n            <pre>const PT = new Promise((resolve , reject) => {\r\n        // executor 生产者代码\r\n     }) </pre>\r\n            <ul>\r\n                <li>传递给 new Promise 的函数为 executor , 将作为第一批宏任务执行</li>\r\n                <li>resolve , reject(可以立即执行 与 异步) 是JS自身提供的回调 , executor成功运行resolve ...</li>\r\n                <li>resolve ：成功情况下的值</li>\r\n                <li>reject : 出现错误返回 error对象</li>\r\n            </ul>\r\n            <hr>\r\n            <h2 id=\"TCF\">then catch finally</h2>\r\n            <p>promise 对象是 executor 与 消费函数之间的链接</p>\r\n            <hr>\r\n            <h4>.then</h4>\r\n            <pre>PT.then((result) => {\r\n         \r\n     }, (error) => {\r\n        \r\n     })</pre>\r\n            <ul> 传入两个 函数 参数\r\n                <li>result : 在 Promise resolved 后运行并接收结果</li>\r\n                <li>error : 在 Promise rejected 后运行并接收 error</li>\r\n                <li>如果只对成功情况感兴趣 ：<span class=\"code\">PT.then( ( resolve )=> { alert ( resolve )})</span></li>\r\n                <li>同上效果 PT.then(alert)</li>\r\n            </ul>\r\n            <hr>\r\n            <h4>.catch</h4>\r\n            <p>.catch 是.then(null , fun) 的完全模拟,是一个简写形式</p>\r\n            <ul>\r\n                <li>只对 error 感兴趣</li>\r\n                <li>.then(null , errorHandlingFunction)</li>\r\n                <li>.catch(errorHandlingFunction)</li>\r\n                <li>效果一致</li>\r\n            </ul>\r\n            <hr>\r\n            <h4>.finally</h4>\r\n            <ul>\r\n                <li>.finally() 没有参数 总是运行 将处理结果传递给下一个程序</li>\r\n                <li>是执行清理 很好的程序</li>\r\n                <li><span class=\"code\">PT.finally( ()=> { alert('any') })</span></li>\r\n            </ul>\r\n            <hr>\r\n            <h4>Promise 链</h4>\r\n            <p>在某些情况下，需要接连执行异步。</p>\r\n            \r\n            <pre>const PT = new Promise((resolve , reject) => {\r\n        setTimeout(() => {\r\n            resolve('1')\r\n        }, 1000);\r\n    }).then( (resolve)=> {\r\n        console.log(resolve); // 1\r\n        return resolve*2\r\n    }).then( (resolve)=> {\r\n        console.log(resolve); // 2\r\n        return resolve*2\r\n    }).then( (resolve)=> {\r\n        console.log(resolve); // 4\r\n        return resolve*2\r\n    })</pre>\r\n    <p>在.then 中所使用的程序，可以创建并返回一个Promise</p>\r\n    <p>并由其构建一个 异步行为链</p>\r\n    <pre>const PT = new Promise((resolve , reject) => {\r\n        resolve(1)\r\n    }).then( (res)=> { // 传入第一次的数值\r\n        return new Promise( (resolve , reject) => {\r\n            setTimeout(() => {\r\n                resolve(res * 2) // 使用第一次的数值\r\n            }, 1000);\r\n        })\r\n    }).then(alert) // 2</pre>\r\n    <p>.catch 不必是立即的，可以在多个 .then 后出现，当其中一个.then 出现error,则会触发.catch</p>\r\n    <hr>\r\n    <h2 id=\"API\">API</h2>\r\n    <h4>Promise.all</h4>\r\n    <p>并行执行多个 Promise</p>\r\n    <hr>\r\n    <h4>Promise.allSettled</h4>\r\n    <p>获取所有 Promise 的状态(status) 和 value</p>\r\n    <hr>\r\n    <h4>Promise.race</h4>\r\n    <p>与 Promise.all 类似，但只等待第一个 settled 的 promise 并获取其结果（或 error）。</p>\r\n    <hr>\r\n    <h4>Promise.resolve / reject</h4>\r\n    <hr>\r\n\r\n    <h2 id=\"AsyncAwait\">Async / await</h2>\r\n    <h4>Async function</h4>\r\n    <pre>async function f(){\r\n        return 1;\r\n    }\r\n    f().then(alert) // 1</pre>\r\n    <p>async 关键字使 f 函数始终返回一个 Promise</p>\r\n    <h4>await</h4>\r\n    <pre>async function f(){\r\n        let promise = new Promise( (resolve , reject) => {\r\n            setTimeout(() => {\r\n                resolve(1)\r\n            }, 1000);\r\n        })\r\n        let res = await promise; // 等待并获取 promise （*）\r\n        alert(res) // 1\r\n    }\r\n    f()</pre>\r\n    <p>函数执行时，暂停在 * 那一行，拿到resolve后继续执行</p>\r\n    <p>关键字 await 让 JS 引擎等待直到 Promise状态变为 settled(稳定)</p>\r\n\r\n\r\n\r\n\r\n\r\n        </div>\r\n    </div>\r\n    \r\n    </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport navBar from 'common/navBar.vue'\r\nimport sidebarR from 'common/SidebarR.vue'\r\nexport default {\r\n    components: {\r\n        navBar,\r\n        sidebarR\r\n    },\r\n     methods: {\r\n        GoSection(str){\r\n            document.getElementById(`${str}`).scrollIntoView({behavior: 'smooth'});\r\n        }\r\n    }\r\n}\r\n</script>\r\n","import { render } from \"./promise.vue?vue&type=template&id=4ca20aa3\"\nimport script from \"./promise.vue?vue&type=script&lang=js\"\nexport * from \"./promise.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"C:\\\\Users\\\\thefa\\\\Documents\\\\GitHub\\\\thefangyi.github.io\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}