{"version":3,"sources":["webpack:///./src/study/axios/axios.vue","webpack:///./src/study/axios/axios.vue?55a2","webpack:///./src/components/common/btn.vue?65b3","webpack:///./src/components/common/btn.vue","webpack:///./src/components/common/btn.vue?5f6e"],"names":["class","default","time","components","navBar","btn","sidebarR","methods","ax","render","id","getId","props","type","String","this","document","getElementById","style","setTimeout","__scopeId"],"mappings":"0JAGqC,W,iBAGH,wB,GAKzBA,MAAM,M,GACFA,MAAM,W,EAEX,eAAc,UAAV,SAAK,G,+7JAbb,eAuMM,YAtMF,eAOU,QANWC,QAAO,gBAAC,iBAEzB,C,MACiBC,KAAI,gBAAC,iBAEtB,C,YAGR,eA2LM,MA3LN,EA2LM,CA1LF,eAyLM,MAzLN,EAyLM,CAvLN,EACA,eAAqB,GACjB,Q,8DAkMG,GACXC,WAAY,CACRC,SAAA,KACAC,MAAA,KACAC,SAAA,QAEJC,QAAS,CACLC,GADK,eCrNb,EAAOC,OAASA,EAED,gB,kCCLf,W,oKCEsB,M,wEADlB,eAEM,OAFDC,GAAG,QAAQV,MAAM,eAAgB,QAAK,8BAAE,EAAAW,OAAA,EAAAA,MAAA,sB,CACzC,eAAgC,eAAxB,eAAe,uBAAf,iBAAe,C,mBA2ChB,GACXC,MAAO,CACHC,KAAMC,QAEVP,QAAS,CAELI,MAFK,WAGEI,KAAKF,OAGJG,SAASC,eAAe,SAASC,MAAQ,qDACzCC,YAAW,WACPH,SAASC,eAAe,SAASC,MAAQ,qDACzCC,YAAW,WACPH,SAASC,eAAe,SAASC,MAAQ,qDACzCC,YAAW,WACPH,SAASC,eAAe,SAASC,MAAQ,uDAC1C,OACJ,OACJ,S,UC3DnB,EAAOT,OAASA,EAChB,EAAOW,UAAY,kBAEJ","file":"js/chunk-25ed3b05.c9a6745a.js","sourcesContent":["<template>\r\n    <div>\r\n        <nav-bar>\r\n            <template v-slot:default>\r\n                Axios\r\n            </template>\r\n            <template v-slot:time>\r\n                2021年8月11日10:06:00\r\n            </template>\r\n        </nav-bar>\r\n    \r\n    <div class=\"xy\">\r\n        <div class=\"content\">\r\n        \r\n        <h2>axios</h2>\r\n        <sidebarR></sidebarR>\r\n            <ul> \r\n                <li>axios是ajax的封装</li>\r\n                <li>基于promise的HTTP库</li>\r\n                <li>支持node端和浏览器</li>\r\n                <li>promise管理异步</li>\r\n                <li>支持请求/响应拦截器</li>\r\n                <li>支持请求取消</li>\r\n            </ul>\r\n            <hr>\r\n            <ul> 原生Ajax缺点\r\n                <li>MVC编程 ， 不符合现在的 MVVM</li>\r\n                <li>使用Ajax而引入整个 JQuery 不合理</li>\r\n                <li>不符合关注分离(Separation of Concerns)原则</li>\r\n                <li>配置和调用方式混乱， 基于事件的异步模型不友好</li>\r\n            </ul>\r\n            <hr>\r\n            <ul> RestFul API 规范\r\n                <li>GET(SELECT): 从服务器取出资源</li>\r\n                <li>POST(CREATE) 在服务器新建一个资源</li>\r\n                <li>PUT(UPDATE) 在服务器更新资源(客户端提供改变后的完整资源)</li>\r\n                <li>PATCH(UPDATE) 在服务器更新资源(客户端提供改变的属性)</li>\r\n                <li>DELETE(DELETE) 在服务器删除资源</li>\r\n                <hr>\r\n            </ul>\r\n            <hr>\r\n            <ul>常用语法\r\n                <li>axios(config) | 发送任意请求</li>\r\n                <li>axios(url[,config]) | 指定url发送 get 请求</li>\r\n                <li>axios.request(config) | 等同于 axios(config)</li>\r\n                <li>axios.get(url[,config]) | 发送 get 请求</li>\r\n                <li>axios.delete(url[,config]) | 发送 delete 请求</li>\r\n                <li>axios.post(url[,data , config]) | 发送 post 请求</li>\r\n                <li>axios.put(url[, data , config]) | 发送 put 请求</li>\r\n                <li>axios.defaults.xxx | 请求的默认全局配置</li>\r\n                <li>axios.interceptors.request.use() | 添加请求拦截器</li>\r\n                <li>axios.interceptors.response.use() | 添加响应拦截器</li>\r\n                <li>axios,create([config]) | 创建一个新的 axios (没有下面的功能)</li>\r\n                <li>axios.Cancel() | 创建取消请求的错误对象</li>\r\n                <li>axios.CancelToken() | 创建取消请求的 token 对象</li>\r\n                <li>axios.isCancel() | 是否是一个取消请求的错误</li>\r\n                <li>axios.all(promises) | 批量执行多个异步请求</li>\r\n                <li>axios.spread() | 指定接收所有成功数据的回调函数的方法</li>\r\n            </ul>\r\n            \r\n            <ul>响应报文\r\n                <li>响应头 : headers</li>\r\n                <li>响应行</li>\r\n                <li>响应体</li>\r\n                <li>响应空行</li>\r\n                <li>request: 原生的ajax请求对象</li>\r\n                <li>status: 响应状态码</li>\r\n                <hr>\r\n            </ul>\r\n        <h4>配置对象(config)</h4>\r\n            <ul>\r\n            <li>url : 请求地址</li>\r\n            <li>method : 请求类型</li>\r\n            <li>baseURL : 请求地址的基础地址</li>\r\n            <li>transformRequest : 将请求数据进行处理，在进行发送</li>\r\n            <li>transformResponse : 对响应的结果进行改变</li>\r\n            <li>headers : 对请求头信息配置</li>\r\n            <li>params ：设定url参数 添加属性</li>\r\n            </ul>\r\n            <hr>\r\n\r\n        <pre><code class=\"language-js\">function get (){ // 获取\r\n        // 发送Ajax请求\r\n            axios({\r\n            // 请求类型\r\n                method: 'GET', // GET POST PUT DELETE\r\n            // URL\r\n                url: 'http:// ...posts'\r\n            }).then((result) => { // 成功信息\r\n                \r\n            }).catch((err) => { // 失败信息\r\n                    \r\n            });\r\n    }\r\n\r\n    function post (){ // 新建\r\n            axios({\r\n                method: 'POST', // GET POST PUT DELETE\r\n                url: 'http:// ...posts',\r\n                // 设置请求体\r\n                data: {\r\n                        title: '请求数据',\r\n                        author: '请求数据'\r\n                }\r\n            }).then((result) => { // 成功信息\r\n                \r\n            }).catch((err) => { // 失败信息\r\n                    \r\n            });\r\n    }\r\n\r\n    function put (){ // 更新\r\n        axios({\r\n            method: 'PUT', // GET POST PUT DELETE\r\n            url: 'http:// ...posts/id',\r\n            data: {\r\n                    title: '请求数据',\r\n                    author: '请求数据'\r\n            }\r\n        }).then((result) => { // 成功信息\r\n            \r\n        }).catch((err) => { // 失败信息\r\n                \r\n        });\r\n    }   \r\n        \r\n    function Delete (){ // 删除\r\n            axios({\r\n            method: 'DELETE', // GET POST PUT DELETE\r\n            url: 'http:// ...posts/id',\r\n            }).then((result) => { // 成功信息\r\n            \r\n            }).catch((err) => { // 失败信息\r\n                    \r\n            });\r\n        }</code></pre>\r\n\r\n        <hr>\r\n        <h2>实例</h2>\r\n        <h4>POST ， 将JSON转化为字符串格式</h4>\r\n        <ul>\r\n            <li>transformRequest` 允许在向服务器发送前，修改请求数据,对 data 进行任意转换处理</li>\r\n            <li>`headers` 是即将被发送的自定义请求头</li>\r\n            <li>encodeURIComponent(str);  进行 URL 编码</li>\r\n            <li>对应的解码为 decodeURIComponent()</li>\r\n        </ul>\r\n        <pre><code class=\"language-js\">fun(){\r\n    axios.post('url: ...' , this.value , {\r\n        transformRequest: [ \r\n            function(data){\r\n                let str = '',\r\n                for(let key in data){\r\n                    str += encodeURIComponent(key)\r\n                        + '='\r\n                        + encodeURIComponent(data[key])\r\n                        + '&'\r\n                }\r\n                return str\r\n            }\r\n        ],\r\n        headers: {\r\n            // 传入头信息\r\n        },\r\n\r\n    }).then((result) => {\r\n        \r\n    }).catch((err) => {\r\n        \r\n    });\r\n}</code></pre>\r\n<hr>\r\n        <h4>封装网络请求</h4>\r\n        <ol>\r\n            <li>创建一个统一的接口目录</li>\r\n            <li>新建一个 request.js 文件</li>\r\n            <ul>\r\n                <li>baseURL: 设置基础 URL</li>\r\n                <li>timeout: 设置 请求超时上限，超时将中断请求</li>\r\n                <li>headers: 自定义请求头</li>\r\n            </ul>\r\n            <pre><code class=\"language-js\">import axios from 'axios'\r\n\r\n// 创建 axios 实例 \r\nconst instance = axios.create({\r\n    baseURL: 'http:// ...',\r\n    timeout: 1000 , \r\n    headers: {'':''}\r\n})\r\n\r\n// 封装方法 \r\nexport function get(url , params) {  // 封装 get 方法 \r\n    return axios.get(url , {  // return axios 返回的是promise 值，可以 get.then()\r\n    //     instance.get(... // 使用实例\r\n        params\r\n    })\r\n}</code></pre>\r\n        </ol>\r\n        </div>\r\n    </div>\r\n\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport navBar from 'common/navBar.vue'\r\nimport btn from 'common/btn.vue'\r\nimport Prism from 'prismjs';\r\nimport axios from 'axios'\r\nimport sidebarR from 'common/SidebarR.vue'\r\n\r\nexport default {\r\n    components: {\r\n        navBar,\r\n        btn,\r\n        sidebarR\r\n    },\r\n    methods: {\r\n        ax(){\r\n            \r\n        }\r\n    }\r\n}\r\n</script>","import { render } from \"./axios.vue?vue&type=template&id=027320cc\"\nimport script from \"./axios.vue?vue&type=script&lang=js\"\nexport * from \"./axios.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./btn.vue?vue&type=style&index=0&id=691173d8&lang=scss&scoped=true\"","<template>\r\n    <div id=\"getId\" class=\"button click\" @click=\"getId\">\r\n        <strong><slot>Go</slot></strong>\r\n    </div>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n// 复用性有待优化\r\n\r\n\r\n\r\n    .button {\r\n        // margin-top: 2%;\r\n        \r\n        // margin-left: 3%;\r\n        margin: 5px;\r\n        border-radius: 10px;\r\n        background-color: #ff4350;\r\n        box-shadow: rgba(214, 30, 30, 0.767) -5px 5px 5px;\r\n        min-width: 70px;\r\n        min-height: 35px;\r\n        transition: all 0.3s ease;\r\n        text-align: center; // 文本水平居中\r\n        display: table; // \r\n        strong {\r\n\r\n            font-size: 16px;\r\n            color: aliceblue;    \r\n            padding-left: 15px;\r\n            padding-right: 15px;\r\n            display: table-cell;\r\n            vertical-align: middle; // 元素放在父元素的中部\r\n\r\n            -webkit-touch-callout: none;\r\n            -webkit-user-select: none;\r\n            -khtml-user-select: none;\r\n            -moz-user-select: none;\r\n            -ms-user-select: none;\r\n            user-select: none;\r\n        }\r\n        \r\n    }\r\n</style>\r\n\r\n<script>\r\nexport default {\r\n    props: {\r\n        type: String\r\n    },\r\n    methods: {\r\n        \r\n        getId(){\r\n            if(this.type){\r\n                \r\n            }else{\r\n                document.getElementById('getId').style = 'box-shadow: rgba(214, 30, 30, 0.900) 0px 5px 15px;'\r\n                setTimeout(() => {\r\n                    document.getElementById('getId').style = 'box-shadow: rgba(214, 30, 30, 0.300) 0px 5px 15px;'\r\n                    setTimeout(() => {\r\n                        document.getElementById('getId').style = 'box-shadow: rgba(214, 30, 30, 0.900) 0px 5px 15px;'\r\n                        setTimeout(() => {\r\n                            document.getElementById('getId').style = 'box-shadow: rgba(214, 30, 30, 0.767) -5px 5px 5px;'\r\n                        }, 500);\r\n                    }, 1000);\r\n                }, 500);\r\n            }\r\n            \r\n            \r\n            \r\n            \r\n        }\r\n\r\n    }\r\n}\r\n</script>","import { render } from \"./btn.vue?vue&type=template&id=691173d8&scoped=true\"\nimport script from \"./btn.vue?vue&type=script&lang=js\"\nexport * from \"./btn.vue?vue&type=script&lang=js\"\n\nimport \"./btn.vue?vue&type=style&index=0&id=691173d8&lang=scss&scoped=true\"\nscript.render = render\nscript.__scopeId = \"data-v-691173d8\"\n\nexport default script"],"sourceRoot":""}