{"version":3,"sources":["webpack:///./src/study/nodus/axios.vue","webpack:///./src/study/nodus/axios.vue?cf4a"],"names":["class","default","time","data","components","navBar","sidebarR","methods","GoSection","str","document","getElementById","scrollIntoView","behavior","__exports__","render"],"mappings":"kOAGqC,iB,iBAGH,wB,GAKzBA,MAAM,M,GACFA,MAAM,W,EACP,eAAc,UAAV,SAAK,G,qqFAZjB,eAqFM,YApFF,eAOU,QANWC,QAAO,GAAC,iBAEzB,C,MACiBC,KAAI,GAAC,iBAEtB,C,YAGR,eAyEM,MAzEN,EAyEM,CAxEF,eAuEM,MAvEN,EAuEM,CAtEF,EACA,eAAqB,GAErB,W,wBA4EG,GACXC,KADW,WAEP,MAAO,IAIXC,WAAY,CACRC,SAAA,KACAC,SAAA,QAEJC,QAAS,CACLC,UADK,SACKC,GACNC,SAASC,eAAT,UAA2BF,IAAOG,eAAe,CAACC,SAAU,c,qBCnGxE,MAAMC,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASC,GAAQ,CAAC,YAAY,qBAE1E","file":"js/chunk-2d230c66.4ad03f7c.js","sourcesContent":["<template>\r\n    <div>\r\n        <nav-bar>\r\n            <template v-slot:default>\r\n                Axios  Nodus\r\n            </template>\r\n            <template v-slot:time>\r\n                2021年8月21日21:53:25\r\n            </template>\r\n        </nav-bar>\r\n\r\n    <div class=\"xy\">\r\n        <div class=\"content\">\r\n            <h2>axios</h2>\r\n            <sidebarR></sidebarR>\r\n\r\n            <h4>响应拦截器</h4>\r\n            <small>在 xyshop 中，添加响应拦截器，用于对后端接口报错的错误信息进行整理。<br>对登录时接口返回的错误信息的处理</small>\r\n            <pre>export function ... {\r\n\r\ninstance.interceptors. <strong>1</strong> response.use( (response) => {\r\n        return response;\r\n    }, (error) => {\r\n        let err = <strong>2</strong> error.response.data.errors <strong>3</strong> [Object.keys(error.response.data.errors)[0]]\r\n        Toast(err[0]);\r\n        return Promise.reject(error);\r\n    });    \r\n\r\n            }</pre>\r\n        <ol>\r\n            <li>response ：请求的响应结果，在拦截器中对结果进行操作。</li>\r\n            <li>error.response.data.errors = 错误的请求返回的 响应结果 的数据中的错误信息 </li>\r\n            <li>obj[Object.keys(obj)[0]] 语法 ，在未知键的情况下访问当前对象的 '第一个值'</li>\r\n        </ol>\r\n        <hr>\r\n\r\n        <h4>请求拦截器 / 登录操作</h4>\r\n        <small>在 xyshop 中，进行登录验证功能开发。 </small>\r\n        <pre><small>in request.js</small> \r\n     <strong>1</strong> instance.interceptors.request.use(function (config) {\r\n        const token = window.localStorage.getItem('token')\r\n        if (token) {\r\n             <strong>2</strong> config.headers.Authorization = 'Bearer '+token;\r\n        }\r\n        return config;\r\n    }, function (error) {\r\n        return Promise.reject(error);\r\n    });\r\n    <hr>\r\n <small>in login.vue</small> \r\nlogin(state).then((result) => {\r\n        // 登录成功时 服务器会返回一个 授权 Token ，保存在本地 window.localStorage \r\n        window.localStorage.setItem('token' , result.data.access_token)\r\n        Toast.success('登录成功')\r\n        setTimeout(() => {\r\n            router.go(-1)\r\n        }, 1000);\r\n    })\r\n<hr>\r\n <small>in  router/index.js</small>\r\n <strong>3</strong> router.beforeEach(((to , next) => {\r\n   <strong>4</strong> if (to.meta.isAuthRequired && window.localStorage.getItem('token') === ''){\r\n    router.push('/user/login')\r\n  }\r\n...\r\n{\r\n    path: '/cart',\r\n    name: 'cart',\r\n    component: cart,\r\n    meta: {\r\n      isAuthRequired: true\r\n    }\r\n  },</pre>\r\n\r\n  <ol>\r\n      <li>请求拦截器： 请求发送之前做些什么</li>\r\n      <li>xyshop JWT 认证，登录后得到 token , 需要添加到 请求头中。<br>\r\n      getItem('...') 获取到保存的请求头， 将请求头添加到请求里。</li>\r\n      <li></li>\r\n  </ol>\r\n\r\n\r\n\r\n        </div>\r\n    </div>\r\n     \r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport navBar from 'common/navBar.vue'\r\nimport sidebarR from 'common/SidebarR.vue'\r\nexport default {\r\n    data() {\r\n        return {\r\n            \r\n        }\r\n    },\r\n    components: {\r\n        navBar,\r\n        sidebarR\r\n    },\r\n    methods: {\r\n        GoSection(str){\r\n            document.getElementById(`${str}`).scrollIntoView({behavior: 'smooth'});\r\n        },\r\n\r\n    },\r\n\r\n    \r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n    \r\n</style>","import { render } from \"./axios.vue?vue&type=template&id=08cd94b1&scoped=true\"\nimport script from \"./axios.vue?vue&type=script&lang=js\"\nexport * from \"./axios.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"C:\\\\Users\\\\thefa\\\\Documents\\\\GitHub\\\\thefangyi.github.io\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-08cd94b1\"]])\n\nexport default __exports__"],"sourceRoot":""}