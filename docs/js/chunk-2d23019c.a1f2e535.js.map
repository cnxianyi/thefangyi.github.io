{"version":3,"sources":["webpack:///./src/study/TypeScript/TSbasis.vue","webpack:///./src/study/TypeScript/TSbasis.vue?23dd"],"names":["class","default","time","components","navBar","render"],"mappings":"wJAGqC,sB,iBAGH,gB,EAK9B,eAmFM,OAnFDA,MAAM,MAAI,CACX,eAiFM,OAjFDA,MAAM,WAAS,CAEhB,eA6EC,YA7EI,eA6EV,QA7EgBA,MAAM,uBAAsB,4+CA8E/C,eAAa,UAAT,Y,mFA3FJ,eA+FM,YA9FF,eAOU,QANWC,QAAO,gBAAC,iBAEzB,C,MACiBC,KAAI,gBAAC,iBAEtB,C,YAGR,I,gBA2FW,G,UAAA,CACXC,WAAY,CACRC,SAAA,QCrGR,EAAOC,OAASA,EAED","file":"js/chunk-2d23019c.a1f2e535.js","sourcesContent":["<template>\r\n    <div>\r\n        <nav-bar>\r\n            <template v-slot:default>\r\n                TypeScript basis\r\n            </template>\r\n            <template v-slot:time>\r\n                2021年7月23日\r\n            </template>\r\n        </nav-bar>\r\n\r\n    <div class=\"xy\">\r\n        <div class=\"content\">\r\n          \r\n            <pre><code class=\"language-javascript\">let a: number = 10; // 指定number类型\r\nfunction num(a: number, b: number): number {\r\n  //设置返回值为 number类型\r\n  return a + b;\r\n}\r\n// num(123,'456',789)//ts 报错\r\n\r\nlet b: \"male\" | \"famle\"; // 联合类型\r\nb = \"male\";\r\nb = \"famle\";\r\n\r\nlet d: any; //任意类型 相当于关闭了TS功能\r\n// 避免隐式any let d;\r\nd = 10;\r\nd = \"10\";\r\n\r\nlet e: unknown; // 表示未知类型值\r\ne = \"10\";\r\n\r\n// 类型断言 两种语法\r\nlet s: string;\r\ns = e as string;\r\ns = &#60;string&#62;e;\r\n\r\n//void 表示没有返回值的函数\r\nfunction fn(): void {\r\n  return;\r\n  // return undefined;\r\n}\r\n\r\n//never 表示空 ， 不能是任何值\r\nfunction fn2(): never {\r\n  throw new Error(\"报错\");\r\n}\r\n\r\n// object 对象形式\r\nlet o: object;\r\no = {};\r\no = () => {};\r\n\r\n// 必须有一个string的name , 可选 number的age , 可选任意类型的值\r\nlet na: { name: string; age?: number; [propsName: string]: any };\r\nna = { name: \"\", age: 18, all: \"all\" };\r\n\r\n// 必须有两个数字类型且返回值为number\r\nlet f: (a: number, b: number, c?: any) => number;\r\nf = function(n1, n2, n3) {\r\n  return n1 + n2;\r\n};\r\n\r\n// 创建数组\r\nlet arr: string[];\r\nlet ar: Array&#60;number&#62;;\r\n\r\n// 创建元组 ，固定长度的数组\r\nlet ya: [string, number];\r\n\r\n//创建枚举\r\nenum Gender {\r\n  male, // 0\r\n  famle, // 1\r\n}\r\nlet i: { name: string; gender: Gender };\r\ni = {\r\n  name: \"str\",\r\n  // gender: Gender.male\r\n  gender: 1, // i.gender === Gender.famle // true\r\n};\r\n\r\n// & |\r\n// & 表示同时 ，\r\nlet q: { name: string } & { age: number };\r\nq = { name: \"s\", age: 18 };\r\n\r\n// 类型的别名\r\ntype myType = 1 | 2 | 3;\r\nlet t: myType;\r\n</code></pre>\r\n    <h4>面向对象</h4>\r\n        </div>\r\n    </div>\r\n\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport navBar from 'common/navBar.vue'\r\nimport Prism from 'prismjs';\r\nexport default {\r\n    components: {\r\n        navBar\r\n    }\r\n}\r\n</script>","import { render } from \"./TSbasis.vue?vue&type=template&id=3b39ccd0\"\nimport script from \"./TSbasis.vue?vue&type=script&lang=js\"\nexport * from \"./TSbasis.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}